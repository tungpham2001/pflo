{"ast":null,"code":"var _jsxFileName = \"/Users/tungpham/Desktop/pflo/src/pages/WorkPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CyberneticTree from './CyberneticTree';\nimport InitiateTree from './InitiateTree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorkPage() {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    // Set up an intersection observer to check if the element is in view\n    const observer = new IntersectionObserver(entries => {\n      // We're only interested in the first entry (there should only be one)\n      const [entry] = entries;\n      // If the element is in view, setIsVisible to true and disconnect the observer\n      if (entry.isIntersecting) {\n        setIsVisible(true);\n        observer.disconnect();\n      }\n    }, {\n      // Configure the observer to trigger when the element is fully in view\n      threshold: 1.0\n    });\n\n    // Start observing the element with the id 'work-container'\n    const container = document.getElementById('work-container');\n    if (container) {\n      observer.observe(container);\n    }\n\n    // Clean up the observer on unmount\n    return () => {\n      if (container) {\n        observer.unobserve(container);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"work-container\",\n    className: \"workContainer\",\n    children: isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"digitalTree\",\n      children: /*#__PURE__*/_jsxDEV(InitiateTree, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(WorkPage, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n_c = WorkPage;\nexport default WorkPage;\nvar _c;\n$RefreshReg$(_c, \"WorkPage\");","map":{"version":3,"names":["React","useState","useEffect","CyberneticTree","InitiateTree","jsxDEV","_jsxDEV","WorkPage","_s","isVisible","setIsVisible","observer","IntersectionObserver","entries","entry","isIntersecting","disconnect","threshold","container","document","getElementById","observe","unobserve","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tungpham/Desktop/pflo/src/pages/WorkPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CyberneticTree from './CyberneticTree';\nimport InitiateTree from './InitiateTree';\n\nfunction WorkPage() {\n    const [isVisible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        // Set up an intersection observer to check if the element is in view\n        const observer = new IntersectionObserver((entries) => {\n            // We're only interested in the first entry (there should only be one)\n            const [entry] = entries;\n            // If the element is in view, setIsVisible to true and disconnect the observer\n            if (entry.isIntersecting) {\n                setIsVisible(true);\n                observer.disconnect();\n            }\n        }, {\n            // Configure the observer to trigger when the element is fully in view\n            threshold: 1.0\n        });\n\n        // Start observing the element with the id 'work-container'\n        const container = document.getElementById('work-container');\n        if (container) {\n            observer.observe(container);\n        }\n\n        // Clean up the observer on unmount\n        return () => {\n            if (container) {\n                observer.unobserve(container);\n            }\n        };\n    }, []);\n\n    return (\n        <div id=\"work-container\" className=\"workContainer\">\n            {isVisible && (\n                <div className=\"digitalTree\">\n                    {/* <CyberneticTree /> */}\n                    <InitiateTree/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default WorkPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;MACnD;MACA,MAAM,CAACC,KAAK,CAAC,GAAGD,OAAO;MACvB;MACA,IAAIC,KAAK,CAACC,cAAc,EAAE;QACtBL,YAAY,CAAC,IAAI,CAAC;QAClBC,QAAQ,CAACK,UAAU,CAAC,CAAC;MACzB;IACJ,CAAC,EAAE;MACC;MACAC,SAAS,EAAE;IACf,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC;IAC3D,IAAIF,SAAS,EAAE;MACXP,QAAQ,CAACU,OAAO,CAACH,SAAS,CAAC;IAC/B;;IAEA;IACA,OAAO,MAAM;MACT,IAAIA,SAAS,EAAE;QACXP,QAAQ,CAACW,SAAS,CAACJ,SAAS,CAAC;MACjC;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIZ,OAAA;IAAKiB,EAAE,EAAC,gBAAgB;IAACC,SAAS,EAAC,eAAe;IAAAC,QAAA,EAC7ChB,SAAS,iBACNH,OAAA;MAAKkB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAExBnB,OAAA,CAACF,YAAY;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACrB,EAAA,CA1CQD,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA4CjB,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}